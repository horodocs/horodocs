"""
Django settings for horodatage project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(str(BASE_DIR) + "/.env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

API_URL = os.environ.get("HORODOCS_API_URL")
API_KEY = os.environ.get("HORODOCS_API_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["127.0.0.1", "130.223.186.250", "*"]
CSRF_TRUSTED_ORIGINS = [
    "https://dcsrs-horo-fron.ad.unil.ch",
    "https://*.127.0.0.1",
    "https://horodocs.unil.ch",
]

ADMINS = {("Ludovic Pfeiffer", "ludovic.pfeiffer@unil.ch")}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "debug.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "horodocs",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "health_check",  # required
    "health_check.db",  # stock Django health checkers
    "health_check.cache",
    "health_check.storage",
    "cookiebanner",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]


ROOT_URLCONF = "horodocs_website.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "horodocs_website.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGES = [
    ("en", _("English")),
    ("fr", _("Fran√ßais")),
]

LANGUAGE_CODE = "en"

TIME_ZONE = "Europe/Zurich"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/horodocs/static/"

STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#: Temporary files folder path
TMP_URL = "/horodatage/static/tmp/"
TMP_URL_QRCODE = f"{os.getcwd()}/horodocs/static/tmp/"

#: Web server URL
WEB_URL = os.environ.get("WEB_URL")
# WEB_URL = 'http://127.0.0.1:8000/'


#: Django Email Backend used
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

#: If email use TLS or not
EMAIL_USE_TLS = True

#: Email hostname
EMAIL_HOST = os.environ.get("EMAIL_HOST")  #'smtp.unil.ch'

#: Port used to send email
EMAIL_PORT = os.environ.get("EMAIL_PORT")

#: Username of the admin Email
EMAIL_HOST_USER = os.environ.get("EMAIL_USER")

#: Password of the Admin Email
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_PASSWORD")

#: Admin email used to send mails to users
EMAIL_ADMIN = os.environ.get("EMAIL")

#: Contact email for the pdf
CONTACT_EMAIL = os.environ.get("CONTACT_EMAIL")

#: Contact name for the pdf
CONTACT_NOM = "NAME"


#: URL used when an user successfully connect to the website
LOGIN_REDIRECT_URL = "/"


#: Time before the tree will be closed and put into the logs journal file.
TREE_LIFE_SPAN = 60 * 5  # in seconds

#: The transaction verifier will verify transactions each TRANSACTION_VERIFIER_TIMING seconds.
TRANSACTION_VERIFIER_TIMING = 180

#: Time before the contract transactions file will be updated
REFRESH_JSON_TRANSACTIONS_TIMING = 300

#: Maximal size of the buffer to hash files.
BUF_SIZE = 65536

#: URL of the header img used in the pdf.
HORODOCS_HEADER_IMG_URL = f"{os.getcwd()}/horodocs/static/img/Poster-header_2.png"

ACTUAL_VERSION = 1

COOKIEBANNER = {
    "title": _("Cookie settings"),
    "header_text": _(
        "We are using cookies on this website. Only essentials one, there is no analytics here."
    ),
    "footer_text": _("Please accept our cookies"),
    "footer_links": [],
    "groups": [
        {
            "id": "essential",
            "name": _("Essential"),
            "description": _("Essential cookies allow this page to work."),
            "optional": False,
            "cookies": [
                {
                    "pattern": "cookiebanner",
                    "description": _("Meta cookie for the cookies that are set."),
                },
                {
                    "pattern": "csrftoken",
                    "description": _(
                        "This cookie prevents Cross-Site-Request-Forgery attacks."
                    ),
                },
                {
                    "pattern": "sessionid",
                    "description": _(
                        "This cookie is necessary to allow logging in, for example."
                    ),
                },
            ],
        },
    ],
}
